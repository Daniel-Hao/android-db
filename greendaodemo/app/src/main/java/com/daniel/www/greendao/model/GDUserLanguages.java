package com.daniel.www.greendao.model;

import com.daniel.www.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.daniel.www.greendao.dao.GDUserInfoMoreDao;
import com.daniel.www.greendao.dao.GDUserLanguagesDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GDUSER_LANGUAGES.
 */
public class GDUserLanguages {

    private Long id;
    private String user_id;
    private String language_code;
    private long user_info_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GDUserLanguagesDao myDao;

    private GDUserInfoMore gDUserInfoMore;
    private Long gDUserInfoMore__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GDUserLanguages() {
    }

    public GDUserLanguages(Long id) {
        this.id = id;
    }

    public GDUserLanguages(Long id, String user_id, String language_code, long user_info_id) {
        this.id = id;
        this.user_id = user_id;
        this.language_code = language_code;
        this.user_info_id = user_info_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGDUserLanguagesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUser_id() {
        return user_id;
    }

    public void setUser_id(String user_id) {
        this.user_id = user_id;
    }

    public String getLanguage_code() {
        return language_code;
    }

    public void setLanguage_code(String language_code) {
        this.language_code = language_code;
    }

    public long getUser_info_id() {
        return user_info_id;
    }

    public void setUser_info_id(long user_info_id) {
        this.user_info_id = user_info_id;
    }

    /** To-one relationship, resolved on first access. */
    public GDUserInfoMore getGDUserInfoMore() {
        long __key = this.user_info_id;
        if (gDUserInfoMore__resolvedKey == null || !gDUserInfoMore__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GDUserInfoMoreDao targetDao = daoSession.getGDUserInfoMoreDao();
            GDUserInfoMore gDUserInfoMoreNew = targetDao.load(__key);
            synchronized (this) {
                gDUserInfoMore = gDUserInfoMoreNew;
            	gDUserInfoMore__resolvedKey = __key;
            }
        }
        return gDUserInfoMore;
    }

    public void setGDUserInfoMore(GDUserInfoMore gDUserInfoMore) {
        if (gDUserInfoMore == null) {
            throw new DaoException("To-one property 'user_info_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.gDUserInfoMore = gDUserInfoMore;
            user_info_id = gDUserInfoMore.getId();
            gDUserInfoMore__resolvedKey = user_info_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
