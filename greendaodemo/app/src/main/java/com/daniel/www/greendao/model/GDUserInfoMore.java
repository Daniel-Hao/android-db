package com.daniel.www.greendao.model;

import java.util.List;
import com.daniel.www.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.daniel.www.greendao.dao.GDUserInfoMoreDao;
import com.daniel.www.greendao.dao.GDUserLanguagesDao;
import com.daniel.www.greendao.dao.GDUserServicesDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table GDUSER_INFO_MORE.
 */
public class GDUserInfoMore {

    private Long id;
    /** Not-null value. */
    private String user_id;
    /** Not-null value. */
    private String login_user_id;
    private String nick_name;
    private String sex_code;
    private Integer age;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GDUserInfoMoreDao myDao;

    private List<GDUserLanguages> rp_UserInfoToLanguages;
    private List<GDUserServices> rp_UserInfoToServices;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GDUserInfoMore() {
    }

    public GDUserInfoMore(Long id) {
        this.id = id;
    }

    public GDUserInfoMore(Long id, String user_id, String login_user_id, String nick_name, String sex_code, Integer age) {
        this.id = id;
        this.user_id = user_id;
        this.login_user_id = login_user_id;
        this.nick_name = nick_name;
        this.sex_code = sex_code;
        this.age = age;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGDUserInfoMoreDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getUser_id() {
        return user_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_id(String user_id) {
        this.user_id = user_id;
    }

    /** Not-null value. */
    public String getLogin_user_id() {
        return login_user_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLogin_user_id(String login_user_id) {
        this.login_user_id = login_user_id;
    }

    public String getNick_name() {
        return nick_name;
    }

    public void setNick_name(String nick_name) {
        this.nick_name = nick_name;
    }

    public String getSex_code() {
        return sex_code;
    }

    public void setSex_code(String sex_code) {
        this.sex_code = sex_code;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GDUserLanguages> getRp_UserInfoToLanguages() {
        if (rp_UserInfoToLanguages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GDUserLanguagesDao targetDao = daoSession.getGDUserLanguagesDao();
            List<GDUserLanguages> rp_UserInfoToLanguagesNew = targetDao._queryGDUserInfoMore_Rp_UserInfoToLanguages(id);
            synchronized (this) {
                if(rp_UserInfoToLanguages == null) {
                    rp_UserInfoToLanguages = rp_UserInfoToLanguagesNew;
                }
            }
        }
        return rp_UserInfoToLanguages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRp_UserInfoToLanguages() {
        rp_UserInfoToLanguages = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GDUserServices> getRp_UserInfoToServices() {
        if (rp_UserInfoToServices == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GDUserServicesDao targetDao = daoSession.getGDUserServicesDao();
            List<GDUserServices> rp_UserInfoToServicesNew = targetDao._queryGDUserInfoMore_Rp_UserInfoToServices(id);
            synchronized (this) {
                if(rp_UserInfoToServices == null) {
                    rp_UserInfoToServices = rp_UserInfoToServicesNew;
                }
            }
        }
        return rp_UserInfoToServices;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRp_UserInfoToServices() {
        rp_UserInfoToServices = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public void setRp_UserInfoToLanguages(
            List<GDUserLanguages> listGDUserLanguage) {
        this.rp_UserInfoToLanguages = listGDUserLanguage;
    }

    public void setRp_UserInfoToServices(List<GDUserServices> listGDUserService) {
        this.rp_UserInfoToServices = listGDUserService;
    }
    // KEEP METHODS END

}
